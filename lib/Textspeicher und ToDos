/*----------------------------------------------------------------------------------*/
    return StreamBuilder(
stream: context.read<AuthRepository>().authStateChanges(), 
builder: (context, snapshot) {
return Container ();
}, );






- Der SplashScreen wurde installiert mit "flutter_native_splash".
/*----------------------------------------------------------------------------------*/
/* App-Icon generieren und installieren mit"flutter_launcher_icons":
/*----------------------------------------------------------------------------------*/

assets/splash/workbuddy_splashscreen_transparent.png

Dart Package: flutter_launcher_icons unter https://pub.dev/packages/flutter_launcher_icons laden.
Befehl 1: "flutter pub get"
Befehl 2: "dart run flutter_launcher_icons"
// Befehl 3: "flutter pub run flutter_launcher_icons:main" im Terminal ausführen */ deprecated!!
Um eine vorhandene Konfigurationsdatei zu überschreiben, verwenden Sie das -oFlag:
Step 1: "dart run flutter_launcher_icons:generate -o" 
--> ACHTUNG: dabei werden die Einträge mit "path = 'assets/icon/icon.png'" überschrieben !!!
Step 2: "flutter pub run flutter_launcher_icons"

Step 3: "flutter pub get
          dart run flutter_launcher_icons -f pubspec.yaml"
Wenn Sie Ihrer Konfigurationsdatei einen anderen Namen als "flutter_launcher_icons.yaml" oder "pubspec.yaml" geben, müssen Sie beim Ausführen des Pakets den Namen der Datei angeben: "flutter pub get
          dart run flutter_launcher_icons -f pubspec.yaml"







"Neuer Benutzer? Hier registrieren ...",
/* ----------------------------------------------------------------------------------
Aufgaben:        5.2.5 - Projekt
	       Asynchrones DatabaseRepository

√ Falls du noch kein DatabaseRepository hast, ist jetzt die Gelegenheit, eines anzulegen und grundlegend in deine App einzubinden.
√ Lege also ein DatabaseRepository an. Dabei kannst du dich an der Batch-App orientieren, oder einem der anderen Projekte, die in Classroom verlinkt sind und ein Repository verwendet haben.

Dein DatabaseRepository sollte dann auch in einer MockDatabase implementiert sein.
Lege eine MockDatabase an und sorge dafür, dass sie Daten deiner App zurück gibt.

---> Wie sehen DatabaseRepository und MockDatabase jetzt aus? Kopiere deinen Code.

Die Mock-Implementierung deines abstrakten DatabaseRepository besteht bisher aus synchronen Methoden. Datenbank-Zugriffe sind allerdings asynchron, da die Kommunikation zwischen App und Datenbank nicht instantan ist.

Ändere alle Methoden deines DatabaseRepository und deine Implementierung MockDatabase so ab, dass sie asynchron sind. Verwende zur Simulation einer gewissen Wartedauer bis zum Erhalt einer Antwort einen Delay von 1-3 Sekunden.

Hinweis: In Screens, die schon das DatabaseRepository als Datenquelle verwenden, wird es dadurch zu Fehlern kommen, die wir in der nächsten Aufgabe beheben.

---> Wie sehen DatabaseRepository und MockDatabase jetzt aus? Kopiere deinen Code.

Da die Methoden deines DatabaseRepository nun Futures statt konkrete Werte zurückliefern, musst du in deinen Screens entsprechend darauf reagieren.

Verwende an den entsprechenden Stellen FutureBuilder und reagiere damit auf die verschiedenen Zustände der Futures (Ladend, Daten, Error).

Mache Commit und Push, wenn du fertig bist.

---> Wie sehen deine Screens jetzt beispielhaft aus? Kopiere den Code von zwei Screens.





/*----------------------------------------------------------------------------------*/

//----------------------------------------------------------------------------------
// war vorher im pubspec.yaml:
// flutter_native_splash:
//  color: "#FFFFFF"
//  image: assets/splash/workbuddy_splashscreen_transparent.png
//  android_12:
//    image: assets/splash/workbuddy_splashscreen_transparent.png
//    color: "#FFFFFF"
//    icon_background_color: "#FFFFFF"
//----------------------------------------------------------------------------------
// war vorher im flutter_native_splash.yaml:
// flutter_native_splash:
//   #color: "#42a5f5"
//   background_image: assets/splash/workbuddy_splashscreen_transparent.png
//   android_12:
//     background_image: assets/splash/workbuddy_splashscreen_transparent.png
//----------------------------------------------------------------------------------
// GestureDetector(
// onTap: () {
// Navigator.push(
// context,
// MaterialPageRoute(
// builder: (context) => const MainSelectionScreen()
// ),
// );
// },
// ),
//----------------------------------------------------------------------------------
                /* Hier ist ein Button zum Testen */
                // ElevatedButton(
                //   onPressed: () {
                //     log("Auf - AccountingMenu - Übersicht aller Ausgaben - Update-Hinweis 112 - aktiviert");
                //     showDialog(
                //       context: context,
                //       builder: (context) => AlertDialog(
                //         title: const Text('Update-Hinweis 112'),
                //         content: const Text(
                //             'Diese Funktion kommt bald in einem kostenlosen Update!'),
                //         actions: [
                //           TextButton(
                //             child: const Text('OK'),
                //             onPressed: () {
                //               Navigator.of(context).pop();
                //             },
                //           ),
                //         ],
                //       ),
                //     );
                //   },
                //   child: const Text("Testen"),
                // ),
//----------------------------------------------------------------------------------
// const primeColor = Color.fromRGBO(210, 210, 255, 1); // helles lila = fromRGBO(210, 210, 255,1)
// const primeColor = Color.fromRGBO(212, 213, 251, 1); // sehr helles blau = fromRGBO(212, 213, 251, 1)
// const primeColor = Color.fromRGBO(91, 159, 31, 1); // sehr grün
// const primeColor = Color.fromARGB(255, 255, 255, 255); // hellgraublau
//----------------------------------------------------------------------------------
      // bottomNavigationBar: NavigationBarTheme(
      //   data: NavigationBarThemeData(
      //     labelTextStyle: WidgetStateProperty.resolveWith<TextStyle>(
      //       (Set<WidgetState> states) => const TextStyle(color: Colors.white),
      //     ),
      //     indicatorColor: Colors.teal,
      //   ),
      //   child: NavigationBar(
      //     backgroundColor: Colors.teal[800],
      //     selectedIndex: _selectedIndex,
      //     onDestinationSelected: _onItemTapped,
      //     labelBehavior: NavigationDestinationLabelBehavior.onlyShowSelected,
      //     destinations: const <NavigationDestination>[
      //       NavigationDestination(
      //         icon: Icon(Icons.home, color: Colors.white70),
      //         selectedIcon: Icon(Icons.home, color: Colors.white),
      //         label: 'Home',
      //       ),
      //       NavigationDestination(
      //         icon: Icon(Icons.airplane_ticket, color: Colors.white70),
      //         selectedIcon: Icon(Icons.airplane_ticket, color: Colors.white),
      //         label: 'Trips',
      //       ),
      //       NavigationDestination(
      //         icon: Icon(Icons.explore, color: Colors.white70),
      //         selectedIcon: Icon(Icons.explore, color: Colors.white),
      //         label: 'Destina...',
      //       ),
      //       NavigationDestination(
      //         icon: Icon(Icons.favorite, color: Colors.white70),
      //         selectedIcon: Icon(Icons.favorite, color: Colors.white),
      //         label: 'Favorites',
      //       ),
      //       NavigationDestination(
      //         icon: Icon(Icons.settings, color: Colors.white70),
      //         selectedIcon: Icon(Icons.settings, color: Colors.white),
      //         label: 'Settings',
      //       ),
      //     ],
      //   ),
//----------------------------------------------------------------------------------

  // // Code-Aufgabe erstellen (createProblem)

  // // Code-Aufgabe löschen (deleteProblem)

  // // Alle Code-Aufgaben holen
  // Future<List<Exercise>> getAllProblems();

  // // Code-Aufgabe holen (getNextProblem)
  // Future<Exercise> getNextProblem();

  // // Prüfung einer Lösung (checkSolution)
  // Future<bool> checkSolution(Exercise exercise, String? userSolution);
